substitutions:
  door_relay_pin: "GPIO16"
  buzzer_relay_pin: "GPIO17"
  door_open_sensor_pin: "GPIO4"
  door_closed_sensor_pin: "GPIO5"
  status_led_pin: "GPIO23"
  auto_close_timer_minutes: "15"

esphome:
  name: garage_door_controller
  friendly_name: Garage Door Controller

esp32:
  board: esp32dev

# Enable logging & API
logger:
api:
ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Status LED
status_led:
  pin: ${status_led_pin}

# Relay for garage door button
switch:
  - platform: gpio
    id: door_relay
    name: "Garage Door Relay"
    pin: ${door_relay_pin}
    interlock: [door_relay]
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: buzzer_relay
    name: "Garage Buzzer Relay"
    pin: ${buzzer_relay_pin}
    restore_mode: ALWAYS_OFF

# Door sensors
binary_sensor:
  - platform: gpio
    pin: ${door_open_sensor_pin}
    name: "Garage Door Open"
    id: door_open
    device_class: opening
    filters:
      - invert: false

  - platform: gpio
    pin: ${door_closed_sensor_pin}
    name: "Garage Door Closed"
    id: door_closed
    device_class: opening
    filters:
      - invert: false

# Template cover to control via HA
cover:
  - platform: template
    name: "Garage Door"
    id: garage_door
    device_class: garage
    open_action:
      - switch.turn_on: buzzer_relay
      - switch.turn_on: door_relay
      - delay: 500ms
      - switch.turn_off: door_relay
      - delay: 5s
      - switch.turn_off: buzzer_relay
    close_action:
      - switch.turn_on: buzzer_relay
      - switch.turn_on: door_relay
      - delay: 500ms
      - switch.turn_off: door_relay
      - delay: 5s
      - switch.turn_off: buzzer_relay
    stop_action:
      - switch.turn_on: door_relay
      - delay: 500ms
      - switch.turn_off: door_relay
    optimistic: false
    assumed_state: false
    lambda: |-
      if (id(door_closed).state) {
        return COVER_CLOSED;
      } else if (id(door_open).state) {
        return COVER_OPEN;
      } else {
        return COVER_OPENING;  // in motion or unknown
      }

# Exposed number in HA for adjustable auto-close time
number:
  - platform: template
    id: auto_close_minutes
    name: "Garage Auto-Close Timer"
    optimistic: true
    min_value: 1
    max_value: 60
    step: 1
    initial_value: ${auto_close_timer_minutes}

# Timer logic
interval:
  - interval: 1min
    then:
      - lambda: |-
          static int countdown = 0;
          if (id(door_open).state && !id(door_closed).state) {
            if (countdown == 0) {
              countdown = (int)id(auto_close_minutes).state;
            } else {
              countdown -= 1;
              ESP_LOGI("autoclose", "Countdown: %d minutes left", countdown);
              if (countdown <= 0) {
                id(garage_door).close();
                countdown = 0;
              }
            }
          } else {
            countdown = 0;  // reset when door is closed
          }

